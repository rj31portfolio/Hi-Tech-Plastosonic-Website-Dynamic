function InfoBox(t) {
    t = t || {}, google.maps.OverlayView.apply(this, arguments), this.content_ = t.content || "", this.disableAutoPan_ = t.disableAutoPan || !1, this.maxWidth_ = t.maxWidth || 0, this.pixelOffset_ = t.pixelOffset || new google.maps.Size(0, 0), this.position_ = t.position || new google.maps.LatLng(0, 0), this.zIndex_ = t.zIndex || null, this.boxClass_ = t.boxClass || "infoBox", this.boxStyle_ = t.boxStyle || {}, this.closeBoxMargin_ = t.closeBoxMargin || "2px", this.closeBoxURL_ = t.closeBoxURL || "http://www.google.com/intl/en_us/mapfiles/close.gif", "" === t.closeBoxURL && (this.closeBoxURL_ = ""), this.infoBoxClearance_ = t.infoBoxClearance || new google.maps.Size(1, 1), void 0 === t.visible && (void 0 === t.isHidden ? t.visible = !0 : t.visible = !t.isHidden), this.isHidden_ = !t.visible, this.alignBottom_ = t.alignBottom || !1, this.pane_ = t.pane || "floatPane", this.enableEventPropagation_ = t.enableEventPropagation || !1, this.div_ = null, this.closeListener_ = null, this.moveListener_ = null, this.contextListener_ = null, this.eventListeners_ = null, this.fixedWidthSet_ = null
}
InfoBox.prototype = new google.maps.OverlayView, InfoBox.prototype.createInfoBoxDiv_ = function() {
        var t, i, e, o = this,
            s = function(t) {
                t.cancelBubble = !0, t.stopPropagation && t.stopPropagation()
            };
        if (!this.div_) {
            if (this.div_ = document.createElement("div"), this.setBoxStyle_(), void 0 === this.content_.nodeType ? this.div_.innerHTML = this.getCloseBoxImg_() + this.content_ : (this.div_.innerHTML = this.getCloseBoxImg_(), this.div_.appendChild(this.content_)), this.getPanes()[this.pane_].appendChild(this.div_), this.addClickHandler_(), this.div_.style.width ? this.fixedWidthSet_ = !0 : 0 !== this.maxWidth_ && this.div_.offsetWidth > this.maxWidth_ ? (this.div_.style.width = this.maxWidth_, this.div_.style.overflow = "auto", this.fixedWidthSet_ = !0) : (e = this.getBoxWidths_(), this.div_.style.width = this.div_.offsetWidth - e.left - e.right + "px", this.fixedWidthSet_ = !1), this.panBox_(this.disableAutoPan_), !this.enableEventPropagation_) {
                for (this.eventListeners_ = [], i = ["mousedown", "mouseover", "mouseout", "mouseup", "click", "dblclick", "touchstart", "touchend", "touchmove"], t = 0; t < i.length; t++) this.eventListeners_.push(google.maps.event.addDomListener(this.div_, i[t], s));
                this.eventListeners_.push(google.maps.event.addDomListener(this.div_, "mouseover", function(t) {
                    this.style.cursor = "default"
                }))
            }
            this.contextListener_ = google.maps.event.addDomListener(this.div_, "contextmenu", function(t) {
                t.returnValue = !1, t.preventDefault && t.preventDefault(), o.enableEventPropagation_ || s(t)
            }), google.maps.event.trigger(this, "domready")
        }
    }, InfoBox.prototype.getCloseBoxImg_ = function() {
        var t = "";
        return "" !== this.closeBoxURL_ && (t = "<img", t += " src='" + this.closeBoxURL_ + "'", t += " align=right", t += " style='", t += " position: relative;", t += " cursor: pointer;", t += " margin: " + this.closeBoxMargin_ + ";", t += "'>"), t
    }, InfoBox.prototype.addClickHandler_ = function() {
        var t;
        "" !== this.closeBoxURL_ ? (t = this.div_.firstChild, this.closeListener_ = google.maps.event.addDomListener(t, "click", this.getCloseClickHandler_())) : this.closeListener_ = null
    }, InfoBox.prototype.getCloseClickHandler_ = function() {
        var i = this;
        return function(t) {
            t.cancelBubble = !0, t.stopPropagation && t.stopPropagation(), google.maps.event.trigger(i, "closeclick"), i.close()
        }
    }, InfoBox.prototype.panBox_ = function(t) {
        var i, e = 0,
            o = 0;
        if (!t && (i = this.getMap()) instanceof google.maps.Map) {
            i.getBounds().contains(this.position_) || i.setCenter(this.position_), i.getBounds();
            var s = i.getDiv(),
                n = s.offsetWidth,
                a = s.offsetHeight,
                l = this.pixelOffset_.width,
                h = this.pixelOffset_.height,
                r = this.div_.offsetWidth,
                d = this.div_.offsetHeight,
                p = this.infoBoxClearance_.width,
                _ = this.infoBoxClearance_.height,
                g = this.getProjection().fromLatLngToContainerPixel(this.position_);
            if (g.x < -l + p ? e = g.x + l - p : g.x + r + l + p > n && (e = g.x + r + l + p - n), this.alignBottom_ ? g.y < -h + _ + d ? o = g.y + h - _ - d : g.y + h + _ > a && (o = g.y + h + _ - a) : g.y < -h + _ ? o = g.y + h - _ : g.y + d + h + _ > a && (o = g.y + d + h + _ - a), 0 !== e || 0 !== o) {
                i.getCenter();
                i.panBy(e, o)
            }
        }
    }, InfoBox.prototype.setBoxStyle_ = function() {
        var t, i;
        if (this.div_) {
            for (t in this.div_.className = this.boxClass_, this.div_.style.cssText = "", i = this.boxStyle_) i.hasOwnProperty(t) && (this.div_.style[t] = i[t]);
            this.div_.style.WebkitTransform = "translateZ(0)", void 0 !== this.div_.style.opacity && "" !== this.div_.style.opacity && (this.div_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(Opacity=' + 100 * this.div_.style.opacity + ')"', this.div_.style.filter = "alpha(opacity=" + 100 * this.div_.style.opacity + ")"), this.div_.style.position = "absolute", this.div_.style.visibility = "hidden", null !== this.zIndex_ && (this.div_.style.zIndex = this.zIndex_)
        }
    }, InfoBox.prototype.getBoxWidths_ = function() {
        var t, i = {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0
            },
            e = this.div_;
        return document.defaultView && document.defaultView.getComputedStyle ? (t = e.ownerDocument.defaultView.getComputedStyle(e, "")) && (i.top = parseInt(t.borderTopWidth, 10) || 0, i.bottom = parseInt(t.borderBottomWidth, 10) || 0, i.left = parseInt(t.borderLeftWidth, 10) || 0, i.right = parseInt(t.borderRightWidth, 10) || 0) : document.documentElement.currentStyle && e.currentStyle && (i.top = parseInt(e.currentStyle.borderTopWidth, 10) || 0, i.bottom = parseInt(e.currentStyle.borderBottomWidth, 10) || 0, i.left = parseInt(e.currentStyle.borderLeftWidth, 10) || 0, i.right = parseInt(e.currentStyle.borderRightWidth, 10) || 0), i
    }, InfoBox.prototype.onRemove = function() {
        this.div_ && (this.div_.parentNode.removeChild(this.div_), this.div_ = null)
    }, InfoBox.prototype.draw = function() {
        this.createInfoBoxDiv_();
        var t = this.getProjection().fromLatLngToDivPixel(this.position_);
        this.div_.style.left = t.x + this.pixelOffset_.width + "px", this.alignBottom_ ? this.div_.style.bottom = -(t.y + this.pixelOffset_.height) + "px" : this.div_.style.top = t.y + this.pixelOffset_.height + "px", this.isHidden_ ? this.div_.style.visibility = "hidden" : this.div_.style.visibility = "visible"
    }, InfoBox.prototype.setOptions = function(t) {
        void 0 !== t.boxClass && (this.boxClass_ = t.boxClass, this.setBoxStyle_()), void 0 !== t.boxStyle && (this.boxStyle_ = t.boxStyle, this.setBoxStyle_()), void 0 !== t.content && this.setContent(t.content), void 0 !== t.disableAutoPan && (this.disableAutoPan_ = t.disableAutoPan), void 0 !== t.maxWidth && (this.maxWidth_ = t.maxWidth), void 0 !== t.pixelOffset && (this.pixelOffset_ = t.pixelOffset), void 0 !== t.alignBottom && (this.alignBottom_ = t.alignBottom), void 0 !== t.position && this.setPosition(t.position), void 0 !== t.zIndex && this.setZIndex(t.zIndex), void 0 !== t.closeBoxMargin && (this.closeBoxMargin_ = t.closeBoxMargin), void 0 !== t.closeBoxURL && (this.closeBoxURL_ = t.closeBoxURL), void 0 !== t.infoBoxClearance && (this.infoBoxClearance_ = t.infoBoxClearance), void 0 !== t.isHidden && (this.isHidden_ = t.isHidden), void 0 !== t.visible && (this.isHidden_ = !t.visible), void 0 !== t.enableEventPropagation && (this.enableEventPropagation_ = t.enableEventPropagation), this.div_ && this.draw()
    }, InfoBox.prototype.setContent = function(t) {
        this.content_ = t, this.div_ && (this.closeListener_ && (google.maps.event.removeListener(this.closeListener_), this.closeListener_ = null), this.fixedWidthSet_ || (this.div_.style.width = ""), void 0 === t.nodeType ? this.div_.innerHTML = this.getCloseBoxImg_() + t : (this.div_.innerHTML = this.getCloseBoxImg_(), this.div_.appendChild(t)), this.fixedWidthSet_ || (this.div_.style.width = this.div_.offsetWidth + "px", void 0 === t.nodeType ? this.div_.innerHTML = this.getCloseBoxImg_() + t : (this.div_.innerHTML = this.getCloseBoxImg_(), this.div_.appendChild(t))), this.addClickHandler_()), google.maps.event.trigger(this, "content_changed")
    }, InfoBox.prototype.setPosition = function(t) {
        this.position_ = t, this.div_ && this.draw(), google.maps.event.trigger(this, "position_changed")
    }, InfoBox.prototype.setZIndex = function(t) {
        this.zIndex_ = t, this.div_ && (this.div_.style.zIndex = t), google.maps.event.trigger(this, "zindex_changed")
    }, InfoBox.prototype.setVisible = function(t) {
        this.isHidden_ = !t, this.div_ && (this.div_.style.visibility = this.isHidden_ ? "hidden" : "visible")
    }, InfoBox.prototype.getContent = function() {
        return this.content_
    }, InfoBox.prototype.getPosition = function() {
        return this.position_
    }, InfoBox.prototype.getZIndex = function() {
        return this.zIndex_
    }, InfoBox.prototype.getVisible = function() {
        return void 0 !== this.getMap() && null !== this.getMap() && !this.isHidden_
    }, InfoBox.prototype.show = function() {
        this.isHidden_ = !1, this.div_ && (this.div_.style.visibility = "visible")
    }, InfoBox.prototype.hide = function() {
        this.isHidden_ = !0, this.div_ && (this.div_.style.visibility = "hidden")
    }, InfoBox.prototype.open = function(t, i) {
        var e = this;
        i && (this.position_ = i.getPosition(), this.moveListener_ = google.maps.event.addListener(i, "position_changed", function() {
            e.setPosition(this.getPosition())
        })), this.setMap(t), this.div_ && this.panBox_()
    }, InfoBox.prototype.close = function() {
        var t;
        if (this.closeListener_ && (google.maps.event.removeListener(this.closeListener_), this.closeListener_ = null), this.eventListeners_) {
            for (t = 0; t < this.eventListeners_.length; t++) google.maps.event.removeListener(this.eventListeners_[t]);
            this.eventListeners_ = null
        }
        this.moveListener_ && (google.maps.event.removeListener(this.moveListener_), this.moveListener_ = null), this.contextListener_ && (google.maps.event.removeListener(this.contextListener_), this.contextListener_ = null), this.setMap(null)
    },
    function(s) {
        function o(t, i) {
            this.mapWrapper = s(t)[0], this.settings = s.extend({}, i), this.markers = [], this.mapData = "", this.init()
        }
        o.prototype.init = function() {
            this.getMapData()
        }, o.prototype.getMapData = function() {
            var i = this,
                t = i.settings.json.jsonfield || "",
                e = i.settings.json.jsonurl || "";
            if (t) {
                if (0 < s(t).length) {
                    var o = s.parseJSON(s(t).val()) || "";
                    "" !== o && null != o && (i.mapData = o, i.set())
                }
            } else e ? s.getJSON(e, function(t) {
                i.mapData = t, i.set()
            }) : console.log("Please provide json data in jsonfield/ jsonurl")
        }, o.prototype.set = function() {
            this.setMap(), this.setMarkers()
        };
        var i = 2,
            e = {
                lat: 0,
                lng: 0
            };
        "false" == s("#isInternational").val() && (i = 4, e = {
            lat: 21,
            lng: 78
        }), o.prototype.setMap = function() {
            var t = {
                zoom: i,
                zoomControl: !0,
                zoomControlOptions: {
                    position: google.maps.ControlPosition.LEFT_TOP
                },
                center: e,
                disableDefaultUI: !0,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            this.map = new google.maps.Map(this.mapWrapper, t), this.map.setOptions({
                minZoom: 2,
                maxZoom: 7
            })
        }, o.prototype.setMarkers = function() {
            for (var t = this, i = 0; i < t.mapData.length; i++) {
                var e = new google.maps.LatLng(t.mapData[i].LatLong[0], t.mapData[i].LatLong[1]),
                    o = new google.maps.Marker({
                        position: e,
                        map: t.map,
                        id: t.mapData[i].pageURL,
                        title: t.mapData[i].Name,
                        icon: t.mapData[i].pin
                    });
                t.setInfobox(o, i)
            }
            t.markerClick()
        }, o.prototype.setInfobox = function(t, i) {
            var e = this,
                o = new InfoBox({
                    content: null === e.mapData[i].pageURL ? "<span class='arrow'></span><div class='infoContent'><h2>" + e.mapData[i].Name + "</h2></div>" : "<span class='arrow'></span><div class='infoContent'><h2>" + e.mapData[i].Name + "</h2><a href=" + e.mapData[i].pageURL + " class='readMore' target='_blank'>More</a></div>",
                    disableAutoPan: !1,
                    maxWidth: 0,
                    pixelOffset: new google.maps.Size(-22, -6),
                    alignBottom: !0,
                    zIndex: null,
                    boxStyle: {
                        background: "",
                        width: "260px"
                    },
                    closeBoxMargin: "5px 5px 0px 0px",
                    closeBoxURL: "/assets/corporate/images/close.gif",
                    infoBoxClearance: new google.maps.Size(1, 1),
                    isHidden: !1,
                    pane: "floatPane",
                    enableEventPropagation: !1
                });
            t.info = o, e.markers.push(t)
        }, o.prototype.markerClick = function() {
            for (var t, i = this, e = 0; e < i.markers.length; e++) t = i.markers[e], google.maps.event.addListener(t, "click", function() {
                for (var t = 0; t < i.markers.length; t++) i.markers[t].info.close();
                this.setPosition(this.position), this.info.open(i.map, this)
            })
        }, s.fn.gmap = function(e) {
            return this.each(function() {
                var t = s(this);
                if (!t.data("gmap")) {
                    var i = new o(this, e);
                    t.data("gmap", i)
                }
            })
        }
    }(jQuery), $(window).on('load', function() {
        "object" == typeof google && "object" == typeof google.maps ? ($(".mapView").on("click", function() {
            var t = $(this).attr("rel"),
                i = $("#map1").data("gmap");
            if (i)
                for (var e = 0; e < i.markers.length; e++) i.markers[e].id == t && google.maps.event.trigger(i.markers[e], "click");
            $("html, body").animate({
                scrollTop: 0
            }, 1e3)
        }), $("#map1").gmap({
            json: {
                jsonfield: "#mapJson",
                jsonurl: ""
            }
        })) : ($(".mapContainer").hide(), $(".mapView").hide())
    });